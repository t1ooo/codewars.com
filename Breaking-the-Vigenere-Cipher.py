# https://www.codewars.com/kata/544e5d75908f2d5eb700052b/

# %%
from collections import Counter

letter_freq = {
    'A':8.167,
    'B':1.492,
    'C':2.782,
    'D':4.253,
    'E':12.702,
    'F':2.228,
    'G':2.015,
    'H':6.094,
    'I':6.966,
    'J':0.153,
    'K':0.772,
    'L':4.025,
    'M':2.406,
    'N':6.749,
    'O':7.507,
    'P':1.929,
    'Q':0.095,
    'R':5.987,
    'S':6.327,
    'T':9.056,
    'U':2.758,
    'V':0.978,
    'W':2.360,
    'X':0.150,
    'Y':1.974,
    'Z':0.074,
}

def calc_letter_freq(letters):
    counter = Counter(letters)
    result = {k:.0 for k in letter_freq.keys()}
    for lt,cnt in counter.items():
        result[lt] = (cnt / len(letters))*100
    return result

def group(ciphertext, key_len):
    result = [[] for _ in range(key_len)]
    for i in range(0, len(ciphertext), key_len):
        chunk = ciphertext[i:i+key_len]
        for k in range(len(chunk)):
            result[k].append(chunk[k])
    return result

def calc_error(freq):
    return sum((letter_freq[ch]-freq[ch])**2
               for ch in letter_freq.keys())

def decode(t, k):
    r = ((ord(t)-ord(k)) % 26) + ord('A')
    return chr(r)

def get_keyword(ciphertext, key_len):
    groups = group(ciphertext, key_len)
    keyword = []
    for g in groups:
        errors = {}
        for i in range(ord('A'), ord('Z')+1):
            k = chr(i)
            decoded = [decode(ch, k) for ch in g]
            freq = calc_letter_freq(decoded)
            errors[k] = calc_error(freq)
        min_error = min(errors.items(), key=lambda x:x[1])
        keyword.append(min_error[0])
    return ''.join(keyword)


def assert_equals(actual, expected, msg=''):
    assert actual == expected, f'{msg}\nactual:   {actual}\nexpected: {expected}'



key = "CODEWARS"
ciphertext = "NSWXARWJGEXIJCZWUZLOAWFJFTUIMUVFEWHWPEEVVCYENYSGVVECSRZLGFDRZBPKWPMIYTFFGQDRJOKOTWWIWNVKUOBEXOLLZFDCOWZLJCXXQSZFITUIMUVFVLVEJDKZGSVWWYNANZKERERFKRLSOYEUTOWMYLVLVSUJNEHMGBFCEFKZGSVWWYZKCPRYPTYWHFHUQEELWGHSBXISAGWSPRVSVNHFNAJAPEDXWRUAHTHVANKSWHKSNSYSXSKEXIKKYVLGDCRFDSUIBLVUVSGMJTYWKFXWAOWDGHWINSYWOWQKSAPKYFLXENXKVMOIBOIWZOPTHEZKXWVMXLPVKTIINEELHFRQBALDMBHVOLVLVSUFEGISOHUMCRREYCUHBRVIWSQGEEJOQFGPANXLJOQHOEELGBFIHEEYVVFEJBVUCZFYHAKWFTRVOPVUKTLGWUKZQFVEJDLKGRWSLRFNGCUHESGJQJHEQTYGTGKMLOWLGLWWAVVFHCUEQTYGTGZLKSVKVMOIOAIWPCWWKDZNGFJIJTRUEIUEPERNGFDKALVLVSUJNEHMGBFMASTSPCQPUBVYNSDRADSQCBDPUZZFIOOENGVSOCXRPOWJGDUIOEELCHLZATVPVKLXDTYWCJDMHASANWWCKFDGFSURYODHWHLRCAEVECOPACKAQBVSBLRJISWITTTGTDRVWSLUJQDPYUCSVWRROAIWGOVMHYDSFSHBWMGDGGFEJBVVTOZRBRFECJDVEEKQQTVSQRTWUDUIOSIWRCUXENXJGZLKEOLKVSAXOSTAGBWMBITLGLWWWNUYGBHVWLWAEHLSJAEVVVHVAAIWFWIJARVFESVIOPVUKOOPUFFJISQINACXKQWMKNNAVVWLAPFKKHLSJOWZCBGMSIKZJPHGKMZFIARVACFEOCQLARSWTHVDEMZFJWVGHAJKKQLRPRFVWQWSNYTJADWSCRRHJMWITTTGFSVEJDJWEFHXSRZLKBJKEVVKVVHIJGCAUVOIPTVJHFHUQEEUAGHUQEEUGOVIPAFFTWVLZLWUOIJCLWSNMXAUVTYWOCVXYODEQBOIPTVJROLVOAJLJVHEJRVWTWQSJAKFFGWIOEEGHHHIZOILKVLEOTFSPRWLAMFKVQRQIOEVQIEPADCWVHHVOAJDNSHWOOFLVTIVNNEHRQFXDEKGRHZIHVVDGHWINSTGODUMOERTQIWSBTYWVCWEHUJSISWLATFHGWJLPLVLVSUWYODHTWVIWBFMVCIXDEKGVOOYOAXWNSWXARWJGEXIJCPSUOIYJCKAQBRJNAECEOQFAFZLVSGAALCTAGHZARRDTOQOBUEUVWRROWZLJHKIPWFHCFDQATVJECFLKBVLCFDRGFLFEHLSJBVAPUWLABVKVOQSPHVJTOQOBUEUVWRRSIKZPCDHFUJLCPOIBRVWROUEIEKWTOOWKFZLUHKIHEKLGFIVAQLWPQBHESKJKPXXEOEJGOVSJASDAKHPHTYWUOPIBUEUVWRRDAJTGSQYOEULQTLXPHVSOWQSWCZVHFHUQEEUAWQTNOKWKBVIMUVFESVEOPPMUWQKPHVNKQFMLHVJQFVSIEFLJSUGEPYWTPDWADFFCGWVWDUDKBJGDETCGFESWRULADLGWLCQWGHWWMEWOCQMYSLUJOVEOIELQSUVZRFHRWQKPHVKGQRRZRKGTSPIIBVJVVHXKPVAIVWGDAISEHHVOTYWWGHSBLVLVSUJNEHMGBFMASRFFTUIMUVFEMDRWLPKKGSPWYJSHIQHWMVFVOOVKLVAPQUCLTFYTOPWWNUKGJHVWLNGTRSYVZCWIOPIOIEUNIGMJGYSPUPEJSTJCPEPAAEVVVHXALVNKGLSJGREGGKSSWYWGZRJBOILWBHSJEFXVVHIWRCAGGWHASTJKDWMKNZFEZDWOITSNZLXARRLWFHSBAGHNMLRCTYWMBRAHEUYGCIIJGCAUVOIPTVJHFHUQEEUAHRWKLMAPUDGNYGLQUUEIIJXQIQHENVSRCHWBADGWGVXKRPLJSJSHDSMIKKINEKZGAHXDOUAUGXGYEJKHIOPUAGHNWHHPOUWEWSLARREGGVECEZFUHUYYTZFICQXDENZGFHEXOLLUCIEPRVSUIUIDIUVGBECYAGLCWQOEDUDGHWINFIWSIHRYIVKJOGEOTIGPUHJBETLQBWLADVKKUQSBSFEGYHCXORJFZDCKUKKVVHQKSKXTSTYANKDGHWINSRJGCQXDESGVHRQNONGHHKIXLZUMSQWZEIXGFWCLENJKHHVWNULJSKSIEIGYCIXDEUNQFDOOIDHNWIMADBWAPREND"
assert_equals(get_keyword(ciphertext, len(key)), key)

key='Z'
ciphertext='EQDMBGBKZHLDCZKKKZMCVDRSNESGDLNTMSZHMRENQMDVEQZMBDSGHRVZRAZCMDVRENQSGDFNUDQMNQNEUHQFHMHZVGNVZMSDCSGDRZLDKZMCZSZKKBNRSRHMGHRPTDRSSNFDSSGDKZMCADXNMCSGDLNTMSZHMRSGDFNUDQMNQBZKKDCTONMGHRADRSRNKCHDQSNCDZKVHSGSGDRHSTZSHNMHSVZRXNTMFFDNQFDVZRGHMFSNMAZQDKXXDZQRNKCZSSGDSHLDSGDFNUDQMNQSNKCFDNQFDSNFNZMCEHMCSGDEQDMBGZMCFHUDSGDLZRHLOKDLDRRZFDKDZUDSGDQDFHNMHLLDCHZSDKXNQFDSQDZCXENQAZSSKDVZMSHMFSNRDQUDZMCOKDZRDGHRZTSGNQHSHDRFDNQFDCHCZRGDVZRSNKCGDVDMSNUDQSGDLNTMSZHMRVHSGZRLZKKZQLXENTMCSGDEQDMBGZMCOZRRDCNMSGDFNUDQMNQRLDRRZFDATSNEBNTQRDSGDEQDMBGCHCMNSVHRGSNKDZUDHMDUHSZAKXSGDBNMEKHBSCDUDKNODCHMSNZVZQJMNVMZRSGDEQDMBGZMCHMCHZMVZQSGZSHRSGDEQDMBGZMCRNLDHMCHZMZKKHDREHFGSHMFSGDAQHSHRGBNKNMHZKRENQFDNQFDHSVZRZCHEEHBTKSSHLDSNBTSZKNMFRSNQXRGNQSHSVZRSGDNMKXSHLDHMGHRKHEDSGZSGDGZCSNRTQQDMCDQZMZQLXZSENQSMDBDRRHSXMDZQSGDENQJRNESGDNGHNHMSGZSAZSSKDFDNQFDMDZQKXCHCMSADBNLDSGDEHQRSOQDRHCDMSNESGDTMHSDCRSZSDRGHRZQLXVZRRTQQNTMCDCAXSGDEQDMBGZMCHMCHZMRAZCKXNTSMTLADQDCRNGDGZCSNRTQQDMCDQSGDENQSKTBJHKXENQGHLSGDEQDMBGZKKNVDCGHLZMCGHRZ'
assert_equals(get_keyword(ciphertext, len(key)), key)
